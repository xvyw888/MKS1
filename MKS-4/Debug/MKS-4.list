
MKS-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb8  08002cb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb8  08002cb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb8  08002cb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002ccc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ccc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000958b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d6  00000000  00000000  000295bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0002ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f38d  00000000  00000000  0002b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009855  00000000  00000000  0003ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005be2a  00000000  00000000  000445c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a03ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001760  00000000  00000000  000a0440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bc8 	.word	0x08002bc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bc8 	.word	0x08002bc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	static uint32_t avg_pot;
	static uint8_t channel;
	// Switch between channels
	switch (channel) {
 80003fc:	4b22      	ldr	r3, [pc, #136]	; (8000488 <HAL_ADC_ConvCpltCallback+0x94>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d024      	beq.n	800044e <HAL_ADC_ConvCpltCallback+0x5a>
 8000404:	dc2b      	bgt.n	800045e <HAL_ADC_ConvCpltCallback+0x6a>
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <HAL_ADC_ConvCpltCallback+0x1c>
 800040a:	2b01      	cmp	r3, #1
 800040c:	d017      	beq.n	800043e <HAL_ADC_ConvCpltCallback+0x4a>
 800040e:	e026      	b.n	800045e <HAL_ADC_ConvCpltCallback+0x6a>
	case 0:
		// Exponential cumulation
		// Notice lazy number displaying
		raw_pot = avg_pot >> 12;
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <HAL_ADC_ConvCpltCallback+0x98>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	0b1a      	lsrs	r2, r3, #12
 8000416:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000418:	601a      	str	r2, [r3, #0]
		avg_pot -= raw_pot;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <HAL_ADC_ConvCpltCallback+0x9c>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_ADC_ConvCpltCallback+0x98>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <HAL_ADC_ConvCpltCallback+0x98>)
 8000426:	601a      	str	r2, [r3, #0]
		avg_pot += HAL_ADC_GetValue(hadc);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fe62 	bl	80010f4 <HAL_ADC_GetValue>
 8000430:	0002      	movs	r2, r0
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <HAL_ADC_ConvCpltCallback+0x98>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	18d2      	adds	r2, r2, r3
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <HAL_ADC_ConvCpltCallback+0x98>)
 800043a:	601a      	str	r2, [r3, #0]
		break;
 800043c:	e00f      	b.n	800045e <HAL_ADC_ConvCpltCallback+0x6a>
	case 1:
		raw_temp = HAL_ADC_GetValue(hadc);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fe57 	bl	80010f4 <HAL_ADC_GetValue>
 8000446:	0002      	movs	r2, r0
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_ADC_ConvCpltCallback+0xa0>)
 800044a:	601a      	str	r2, [r3, #0]
		break;
 800044c:	e007      	b.n	800045e <HAL_ADC_ConvCpltCallback+0x6a>
	case 2:
		raw_volt = HAL_ADC_GetValue(hadc);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fe4f 	bl	80010f4 <HAL_ADC_GetValue>
 8000456:	0002      	movs	r2, r0
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_ADC_ConvCpltCallback+0xa4>)
 800045a:	601a      	str	r2, [r3, #0]
		break;
 800045c:	46c0      	nop			; (mov r8, r8)
	}
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) channel = 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2208      	movs	r2, #8
 8000466:	4013      	ands	r3, r2
 8000468:	2b08      	cmp	r3, #8
 800046a:	d103      	bne.n	8000474 <HAL_ADC_ConvCpltCallback+0x80>
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_ADC_ConvCpltCallback+0x94>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
	else channel++;

}
 8000472:	e005      	b.n	8000480 <HAL_ADC_ConvCpltCallback+0x8c>
	else channel++;
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <HAL_ADC_ConvCpltCallback+0x94>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b02      	ldr	r3, [pc, #8]	; (8000488 <HAL_ADC_ConvCpltCallback+0x94>)
 800047e:	701a      	strb	r2, [r3, #0]
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000034 	.word	0x20000034
 800048c:	20000038 	.word	0x20000038
 8000490:	20000028 	.word	0x20000028
 8000494:	2000002c 	.word	0x2000002c
 8000498:	20000030 	.word	0x20000030

0800049c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004a2:	f000 fc11 	bl	8000cc8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004a6:	f000 f8b5 	bl	8000614 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004aa:	f000 f9a7 	bl	80007fc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ae:	f000 f975 	bl	800079c <MX_USART2_UART_Init>
	MX_ADC_Init();
 80004b2:	f000 f8ff 	bl	80006b4 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	sct_init();
 80004b6:	f000 fa49 	bl	800094c <sct_init>
	HAL_ADCEx_Calibration_Start(&hadc);
 80004ba:	4b4d      	ldr	r3, [pc, #308]	; (80005f0 <main+0x154>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f867 	bl	8001590 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc);
 80004c2:	4b4b      	ldr	r3, [pc, #300]	; (80005f0 <main+0x154>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fda3 	bl	8001010 <HAL_ADC_Start_IT>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Voltage conversion
		uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 80004ca:	4b4a      	ldr	r3, [pc, #296]	; (80005f4 <main+0x158>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	001a      	movs	r2, r3
 80004d0:	0013      	movs	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	189b      	adds	r3, r3, r2
 80004d6:	015a      	lsls	r2, r3, #5
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	001a      	movs	r2, r3
 80004de:	4b46      	ldr	r3, [pc, #280]	; (80005f8 <main+0x15c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f7ff fe0f 	bl	8000108 <__udivsi3>
 80004ea:	0003      	movs	r3, r0
 80004ec:	60bb      	str	r3, [r7, #8]
		// Temperature conversion
		int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <main+0x160>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a43      	ldr	r2, [pc, #268]	; (8000600 <main+0x164>)
 80004f4:	8812      	ldrh	r2, [r2, #0]
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	607b      	str	r3, [r7, #4]
		temperature = temperature * (int32_t)(110 - 30);
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	0013      	movs	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	189b      	adds	r3, r3, r2
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	607b      	str	r3, [r7, #4]
		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8000506:	4b3f      	ldr	r3, [pc, #252]	; (8000604 <main+0x168>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	001a      	movs	r2, r3
 800050c:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <main+0x164>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	0019      	movs	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff fe81 	bl	800021c <__divsi3>
 800051a:	0003      	movs	r3, r0
 800051c:	607b      	str	r3, [r7, #4]
		temperature = temperature + 30;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	331e      	adds	r3, #30
 8000522:	607b      	str	r3, [r7, #4]

		switch (state) {
 8000524:	4b38      	ldr	r3, [pc, #224]	; (8000608 <main+0x16c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d027      	beq.n	800057c <main+0xe0>
 800052c:	dc33      	bgt.n	8000596 <main+0xfa>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <main+0x9c>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d015      	beq.n	8000562 <main+0xc6>
 8000536:	e02e      	b.n	8000596 <main+0xfa>
		case SHOW_POT:
			sct_value(raw_pot*500/4096, raw_pot*9/4096);
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <main+0x170>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	0013      	movs	r3, r2
 800053e:	015b      	lsls	r3, r3, #5
 8000540:	1a9b      	subs	r3, r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	189b      	adds	r3, r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	0b1b      	lsrs	r3, r3, #12
 800054a:	b298      	uxth	r0, r3
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <main+0x170>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	0013      	movs	r3, r2
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	189b      	adds	r3, r3, r2
 8000556:	0b1b      	lsrs	r3, r3, #12
 8000558:	b2db      	uxtb	r3, r3
 800055a:	0019      	movs	r1, r3
 800055c:	f000 fa48 	bl	80009f0 <sct_value>
			break;
 8000560:	e019      	b.n	8000596 <main+0xfa>
		case SHOW_VOLT:
			sct_value(voltage, raw_pot*9/4096);
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	b298      	uxth	r0, r3
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <main+0x170>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	0013      	movs	r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	189b      	adds	r3, r3, r2
 8000570:	0b1b      	lsrs	r3, r3, #12
 8000572:	b2db      	uxtb	r3, r3
 8000574:	0019      	movs	r1, r3
 8000576:	f000 fa3b 	bl	80009f0 <sct_value>
			break;
 800057a:	e00c      	b.n	8000596 <main+0xfa>
		case SHOW_TEMP:
			sct_value(temperature, raw_pot*9/4096);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b298      	uxth	r0, r3
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <main+0x170>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	0013      	movs	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	189b      	adds	r3, r3, r2
 800058a:	0b1b      	lsrs	r3, r3, #12
 800058c:	b2db      	uxtb	r3, r3
 800058e:	0019      	movs	r1, r3
 8000590:	f000 fa2e 	bl	80009f0 <sct_value>
			break;
 8000594:	46c0      	nop			; (mov r8, r8)
		}
		if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0){
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <main+0x174>)
 8000598:	2102      	movs	r1, #2
 800059a:	0018      	movs	r0, r3
 800059c:	f001 faee 	bl	8001b7c <HAL_GPIO_ReadPin>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d107      	bne.n	80005b4 <main+0x118>
			timer = HAL_GetTick();
 80005a4:	f000 fbea 	bl	8000d7c <HAL_GetTick>
 80005a8:	0003      	movs	r3, r0
 80005aa:	60fb      	str	r3, [r7, #12]
			state = SHOW_VOLT;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <main+0x16c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e00d      	b.n	80005d0 <main+0x134>
		}
		else if (HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == 0){
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <main+0x174>)
 80005b6:	2101      	movs	r1, #1
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fadf 	bl	8001b7c <HAL_GPIO_ReadPin>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d106      	bne.n	80005d0 <main+0x134>
			timer = HAL_GetTick();
 80005c2:	f000 fbdb 	bl	8000d7c <HAL_GetTick>
 80005c6:	0003      	movs	r3, r0
 80005c8:	60fb      	str	r3, [r7, #12]
			state = SHOW_TEMP;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0x16c>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() >= timer + 1000){
 80005d0:	f000 fbd4 	bl	8000d7c <HAL_GetTick>
 80005d4:	0002      	movs	r2, r0
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	21fa      	movs	r1, #250	; 0xfa
 80005da:	0089      	lsls	r1, r1, #2
 80005dc:	468c      	mov	ip, r1
 80005de:	4463      	add	r3, ip
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d200      	bcs.n	80005e6 <main+0x14a>
 80005e4:	e771      	b.n	80004ca <main+0x2e>
			// timer = Tick;
			state = SHOW_POT;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <main+0x16c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	{
 80005ec:	e76d      	b.n	80004ca <main+0x2e>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	1ffff7ba 	.word	0x1ffff7ba
 80005f8:	20000030 	.word	0x20000030
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	1ffff7b8 	.word	0x1ffff7b8
 8000604:	1ffff7c2 	.word	0x1ffff7c2
 8000608:	2000003c 	.word	0x2000003c
 800060c:	20000028 	.word	0x20000028
 8000610:	48000800 	.word	0x48000800

08000614 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b091      	sub	sp, #68	; 0x44
 8000618:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	2410      	movs	r4, #16
 800061c:	193b      	adds	r3, r7, r4
 800061e:	0018      	movs	r0, r3
 8000620:	2330      	movs	r3, #48	; 0x30
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f002 fac7 	bl	8002bb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2310      	movs	r3, #16
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 fac0 	bl	8002bb8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2212      	movs	r2, #18
 800063e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2210      	movs	r2, #16
 8000650:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2210      	movs	r2, #16
 8000656:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	22a0      	movs	r2, #160	; 0xa0
 8000668:	0392      	lsls	r2, r2, #14
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	187b      	adds	r3, r7, r1
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fabb 	bl	8001bf0 <HAL_RCC_OscConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800067e:	f000 f95f 	bl	8000940 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	003b      	movs	r3, r7
 8000684:	2207      	movs	r2, #7
 8000686:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	003b      	movs	r3, r7
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069a:	003b      	movs	r3, r7
 800069c:	2101      	movs	r1, #1
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fdc0 	bl	8002224 <HAL_RCC_ClockConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x98>
	{
		Error_Handler();
 80006a8:	f000 f94a 	bl	8000940 <Error_Handler>
	}
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b011      	add	sp, #68	; 0x44
 80006b2:	bd90      	pop	{r4, r7, pc}

080006b4 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	230c      	movs	r3, #12
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fa78 	bl	8002bb8 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_ADC_Init+0xe0>)
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <MX_ADC_Init+0xe4>)
 80006cc:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <MX_ADC_Init+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_ADC_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_ADC_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_ADC_Init+0xe0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_ADC_Init+0xe0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_ADC_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC_Init+0xe0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_ADC_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC_Init+0xe0>)
 8000706:	22c2      	movs	r2, #194	; 0xc2
 8000708:	32ff      	adds	r2, #255	; 0xff
 800070a:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC_Init+0xe0>)
 8000714:	2224      	movs	r2, #36	; 0x24
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC_Init+0xe0>)
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fb34 	bl	8000d90 <HAL_ADC_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC_Init+0x7c>
	{
		Error_Handler();
 800072c:	f000 f908 	bl	8000940 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0152      	lsls	r2, r2, #5
 800073c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2207      	movs	r2, #7
 8000742:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC_Init+0xe0>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fda6 	bl	800129c <HAL_ADC_ConfigChannel>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC_Init+0xa4>
	{
		Error_Handler();
 8000754:	f000 f8f4 	bl	8000940 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2210      	movs	r2, #16
 800075c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075e:	1d3a      	adds	r2, r7, #4
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_ADC_Init+0xe0>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fd99 	bl	800129c <HAL_ADC_ConfigChannel>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC_Init+0xbe>
	{
		Error_Handler();
 800076e:	f000 f8e7 	bl	8000940 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2211      	movs	r2, #17
 8000776:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000778:	1d3a      	adds	r2, r7, #4
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_ADC_Init+0xe0>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd8c 	bl	800129c <HAL_ADC_ConfigChannel>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_ADC_Init+0xd8>
	{
		Error_Handler();
 8000788:	f000 f8da 	bl	8000940 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000c4 	.word	0x200000c4
 8000798:	40012400 	.word	0x40012400

0800079c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	2296      	movs	r2, #150	; 0x96
 80007aa:	0212      	lsls	r2, r2, #8
 80007ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 fe71 	bl	80024c8 <HAL_UART_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80007ea:	f000 f8a9 	bl	8000940 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000040 	.word	0x20000040
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f002 f9d3 	bl	8002bb8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <MX_GPIO_Init+0x138>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_GPIO_Init+0x138>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0309      	lsls	r1, r1, #12
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_GPIO_Init+0x138>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	031b      	lsls	r3, r3, #12
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x138>)
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <MX_GPIO_Init+0x138>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	03c9      	lsls	r1, r1, #15
 8000838:	430a      	orrs	r2, r1
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <MX_GPIO_Init+0x138>)
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	03db      	lsls	r3, r3, #15
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_GPIO_Init+0x138>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <MX_GPIO_Init+0x138>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0289      	lsls	r1, r1, #10
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <MX_GPIO_Init+0x138>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	029b      	lsls	r3, r3, #10
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_GPIO_Init+0x138>)
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_GPIO_Init+0x138>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	02c9      	lsls	r1, r1, #11
 8000870:	430a      	orrs	r2, r1
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_GPIO_Init+0x138>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	02db      	lsls	r3, r3, #11
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	0018      	movs	r0, r3
 800088c:	f001 f993 	bl	8001bb6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8000890:	2387      	movs	r3, #135	; 0x87
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4828      	ldr	r0, [pc, #160]	; (8000938 <MX_GPIO_Init+0x13c>)
 8000896:	2200      	movs	r2, #0
 8000898:	0019      	movs	r1, r3
 800089a:	f001 f98c 	bl	8001bb6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	0192      	lsls	r2, r2, #6
 80008a4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2284      	movs	r2, #132	; 0x84
 80008aa:	0392      	lsls	r2, r2, #14
 80008ac:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_GPIO_Init+0x140>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f000 ffee 	bl	800189c <HAL_GPIO_Init>

	/*Configure GPIO pins : S2_Pin S1_Pin */
	GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2203      	movs	r2, #3
 80008c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2201      	movs	r2, #1
 80008d0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <MX_GPIO_Init+0x140>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f000 ffdf 	bl	800189c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2220      	movs	r2, #32
 80008e2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2201      	movs	r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f6:	193a      	adds	r2, r7, r4
 80008f8:	2390      	movs	r3, #144	; 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ffcc 	bl	800189c <HAL_GPIO_Init>

	/*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
	GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2287      	movs	r2, #135	; 0x87
 800090a:	00d2      	lsls	r2, r2, #3
 800090c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	187b      	adds	r3, r7, r1
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <MX_GPIO_Init+0x13c>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 ffb8 	bl	800189c <HAL_GPIO_Init>

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b00b      	add	sp, #44	; 0x2c
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400
 800093c:	48000800 	.word	0x48000800

08000940 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <sct_init>:
				0b0000111111100000 << 16,
				0b0000111111110000 << 16,
		},
};

void sct_init(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	sct_led(0);
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f80d 	bl	8000970 <sct_led>
	HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, 0);
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <sct_init+0x20>)
 800095c:	2200      	movs	r2, #0
 800095e:	0019      	movs	r1, r3
 8000960:	f001 f929 	bl	8001bb6 <HAL_GPIO_WritePin>
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	48000400 	.word	0x48000400

08000970 <sct_led>:


void sct_led(uint32_t value){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 32; i++) {
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e01e      	b.n	80009c0 <sct_led+0x50>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4817      	ldr	r0, [pc, #92]	; (80009ec <sct_led+0x7c>)
 800098e:	001a      	movs	r2, r3
 8000990:	2110      	movs	r1, #16
 8000992:	f001 f910 	bl	8001bb6 <HAL_GPIO_WritePin>
		value >>= 1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <sct_led+0x7c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f907 	bl	8001bb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <sct_led+0x7c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 f901 	bl	8001bb6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 32; i++) {
 80009b4:	210f      	movs	r1, #15
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	3201      	adds	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b1f      	cmp	r3, #31
 80009c8:	d9db      	bls.n	8000982 <sct_led+0x12>
	}

	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <sct_led+0x7c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	2120      	movs	r1, #32
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f8f0 	bl	8001bb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <sct_led+0x7c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f8ea 	bl	8001bb6 <HAL_GPIO_WritePin>
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	48000400 	.word	0x48000400

080009f0 <sct_value>:


void sct_value(uint16_t value, uint8_t led){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	801a      	strh	r2, [r3, #0]
 80009fc:	1d7b      	adds	r3, r7, #5
 80009fe:	1c0a      	adds	r2, r1, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	uint32_t reg = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]

	reg |= reg_values[0][value / 100 % 10];
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2164      	movs	r1, #100	; 0x64
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	210a      	movs	r1, #10
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fbfb 	bl	8000214 <__aeabi_uidivmod>
 8000a1e:	000b      	movs	r3, r1
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	001a      	movs	r2, r3
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <sct_value+0xb0>)
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	58d3      	ldr	r3, [r2, r3]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	210a      	movs	r1, #10
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fb66 	bl	8000108 <__udivsi3>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	210a      	movs	r1, #10
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fbe6 	bl	8000214 <__aeabi_uidivmod>
 8000a48:	000b      	movs	r3, r1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <sct_value+0xb0>)
 8000a50:	320a      	adds	r2, #10
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 8000a5c:	1dbb      	adds	r3, r7, #6
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	210a      	movs	r1, #10
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fbd6 	bl	8000214 <__aeabi_uidivmod>
 8000a68:	000b      	movs	r3, r1
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <sct_value+0xb0>)
 8000a70:	3214      	adds	r2, #20
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	58d3      	ldr	r3, [r2, r3]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

	reg |= reg_values[3][led];
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <sct_value+0xb0>)
 8000a82:	321e      	adds	r2, #30
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	58d3      	ldr	r3, [r2, r3]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff6d 	bl	8000970 <sct_led>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	08002c00 	.word	0x08002c00

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	69da      	ldr	r2, [r3, #28]
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0549      	lsls	r1, r1, #21
 8000acc:	430a      	orrs	r2, r1
 8000ace:	61da      	str	r2, [r3, #28]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ad2:	69da      	ldr	r2, [r3, #28]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	2414      	movs	r4, #20
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	0018      	movs	r0, r3
 8000afa:	2314      	movs	r3, #20
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f002 f85a 	bl	8002bb8 <memset>
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_ADC_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d133      	bne.n	8000b76 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0089      	lsls	r1, r1, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0289      	lsls	r1, r1, #10
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_ADC_MspInit+0x98>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2203      	movs	r2, #3
 8000b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	193a      	adds	r2, r7, r4
 8000b5a:	2390      	movs	r3, #144	; 0x90
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fe9b 	bl	800189c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f000 fe64 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b70:	200c      	movs	r0, #12
 8000b72:	f000 fe76 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b00b      	add	sp, #44	; 0x2c
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40012400 	.word	0x40012400
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	2414      	movs	r4, #20
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 f80c 	bl	8002bb8 <memset>
  if(huart->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_UART_MspInit+0x90>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d132      	bne.n	8000c10 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	0289      	lsls	r1, r1, #10
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	61da      	str	r2, [r3, #28]
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0289      	lsls	r1, r1, #10
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2202      	movs	r2, #2
 8000bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	187a      	adds	r2, r7, r1
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fe46 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b00b      	add	sp, #44	; 0x2c
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f888 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <ADC1_IRQHandler+0x14>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fa58 	bl	800110c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	200000c4 	.word	0x200000c4

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f7ff ffe3 	bl	8000c68 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f001 ff65 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fbf9 	bl	800049c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb8:	08002cc0 	.word	0x08002cc0
  ldr r2, =_sbss
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc0:	20000108 	.word	0x20000108

08000cc4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <DMA1_Channel1_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_Init+0x24>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_Init+0x24>)
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f809 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cde:	f7ff fee1 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_InitTick+0x5c>)
 8000cfa:	681c      	ldr	r4, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	0019      	movs	r1, r3
 8000d02:	23fa      	movs	r3, #250	; 0xfa
 8000d04:	0098      	lsls	r0, r3, #2
 8000d06:	f7ff f9ff 	bl	8000108 <__udivsi3>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0020      	movs	r0, r4
 8000d10:	f7ff f9fa 	bl	8000108 <__udivsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fdb3 	bl	8001882 <HAL_SYSTICK_Config>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e00f      	b.n	8000d44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d80b      	bhi.n	8000d42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fd80 	bl	8001838 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_InitTick+0x64>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	001a      	movs	r2, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x20>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	18d2      	adds	r2, r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_IncTick+0x20>)
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000104 	.word	0x20000104

08000d7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <HAL_GetTick+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000104 	.word	0x20000104

08000d90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e125      	b.n	8000ffa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fe90 	bl	8000aec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d000      	beq.n	8000dd8 <HAL_ADC_Init+0x48>
 8000dd6:	e103      	b.n	8000fe0 <HAL_ADC_Init+0x250>
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d000      	beq.n	8000de4 <HAL_ADC_Init+0x54>
 8000de2:	e0fd      	b.n	8000fe0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2204      	movs	r2, #4
 8000dec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000dee:	d000      	beq.n	8000df2 <HAL_ADC_Init+0x62>
 8000df0:	e0f6      	b.n	8000fe0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	4a83      	ldr	r2, [pc, #524]	; (8001004 <HAL_ADC_Init+0x274>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d112      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d009      	beq.n	8000e32 <HAL_ADC_Init+0xa2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	401a      	ands	r2, r3
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0xa8>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d116      	bne.n	8000e6a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2218      	movs	r2, #24
 8000e44:	4393      	bics	r3, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	0899      	lsrs	r1, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4964      	ldr	r1, [pc, #400]	; (8001008 <HAL_ADC_Init+0x278>)
 8000e76:	400a      	ands	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
 8000e7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e5b      	ldrb	r3, [r3, #25]
 8000e84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_Init+0x10e>
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	015b      	lsls	r3, r3, #5
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_Init+0x110>
 8000e9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ea0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ea6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_Init+0x124>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_Init+0x126>
 8000eb4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000eb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2124      	movs	r1, #36	; 0x24
 8000ebc:	5c5b      	ldrb	r3, [r3, r1]
 8000ebe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ec0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7edb      	ldrb	r3, [r3, #27]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d115      	bne.n	8000efc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e9b      	ldrb	r3, [r3, #26]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0252      	lsls	r2, r2, #9
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	e00b      	b.n	8000efc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee8:	2220      	movs	r2, #32
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	23c2      	movs	r3, #194	; 0xc2
 8000f02:	33ff      	adds	r3, #255	; 0xff
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d9      	ldr	r1, [r3, #12]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d01b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d017      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d013      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d00f      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d007      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d003      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d112      	bne.n	8000f92 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2107      	movs	r1, #7
 8000f78:	438a      	bics	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6959      	ldr	r1, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	2207      	movs	r2, #7
 8000f88:	401a      	ands	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_ADC_Init+0x27c>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10b      	bne.n	8000fba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	2203      	movs	r2, #3
 8000fae:	4393      	bics	r3, r2
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fb8:	e01c      	b.n	8000ff4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	2212      	movs	r2, #18
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2201      	movs	r2, #1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fde:	e009      	b.n	8000ff4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	fffffefd 	.word	0xfffffefd
 8001008:	fffe0219 	.word	0xfffe0219
 800100c:	833fffe7 	.word	0x833fffe7

08001010 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	230f      	movs	r3, #15
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2204      	movs	r2, #4
 8001028:	4013      	ands	r3, r2
 800102a:	d156      	bne.n	80010da <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2234      	movs	r2, #52	; 0x34
 8001030:	5c9b      	ldrb	r3, [r3, r2]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_ADC_Start_IT+0x2a>
 8001036:	2302      	movs	r3, #2
 8001038:	e056      	b.n	80010e8 <HAL_ADC_Start_IT+0xd8>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2234      	movs	r2, #52	; 0x34
 800103e:	2101      	movs	r1, #1
 8001040:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d007      	beq.n	800105a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800104a:	230f      	movs	r3, #15
 800104c:	18fc      	adds	r4, r7, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fa19 	bl	8001488 <ADC_Enable>
 8001056:	0003      	movs	r3, r0
 8001058:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d13e      	bne.n	80010e2 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <HAL_ADC_Start_IT+0xe0>)
 800106a:	4013      	ands	r3, r2
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	0052      	lsls	r2, r2, #1
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2234      	movs	r2, #52	; 0x34
 8001080:	2100      	movs	r1, #0
 8001082:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	221c      	movs	r2, #28
 800108a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	2b08      	cmp	r3, #8
 8001092:	d110      	bne.n	80010b6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2104      	movs	r1, #4
 80010a0:	438a      	bics	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2118      	movs	r1, #24
 80010b0:	430a      	orrs	r2, r1
 80010b2:	605a      	str	r2, [r3, #4]
          break;
 80010b4:	e008      	b.n	80010c8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	211c      	movs	r1, #28
 80010c2:	430a      	orrs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]
          break;
 80010c6:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2104      	movs	r1, #4
 80010d4:	430a      	orrs	r2, r1
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e003      	b.n	80010e2 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010da:	230f      	movs	r3, #15
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2202      	movs	r2, #2
 80010e0:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80010e2:	230f      	movs	r3, #15
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	781b      	ldrb	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b005      	add	sp, #20
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	fffff0fe 	.word	0xfffff0fe

080010f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	2b04      	cmp	r3, #4
 8001120:	d106      	bne.n	8001130 <HAL_ADC_IRQHandler+0x24>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	2b04      	cmp	r3, #4
 800112e:	d00d      	beq.n	800114c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2208      	movs	r2, #8
 8001138:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800113a:	2b08      	cmp	r3, #8
 800113c:	d14f      	bne.n	80011de <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2208      	movs	r2, #8
 8001146:	4013      	ands	r3, r2
 8001148:	2b08      	cmp	r3, #8
 800114a:	d148      	bne.n	80011de <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	2210      	movs	r2, #16
 8001152:	4013      	ands	r3, r2
 8001154:	d106      	bne.n	8001164 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4013      	ands	r3, r2
 8001170:	d12d      	bne.n	80011ce <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001176:	2b00      	cmp	r3, #0
 8001178:	d129      	bne.n	80011ce <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2208      	movs	r2, #8
 8001182:	4013      	ands	r3, r2
 8001184:	2b08      	cmp	r3, #8
 8001186:	d122      	bne.n	80011ce <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2204      	movs	r2, #4
 8001190:	4013      	ands	r3, r2
 8001192:	d110      	bne.n	80011b6 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	210c      	movs	r1, #12
 80011a0:	438a      	bics	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	4a33      	ldr	r2, [pc, #204]	; (8001278 <HAL_ADC_IRQHandler+0x16c>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	2201      	movs	r2, #1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
 80011b4:	e00b      	b.n	80011ce <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	2220      	movs	r2, #32
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	2201      	movs	r2, #1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f90f 	bl	80003f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b80      	cmp	r3, #128	; 0x80
 80011ea:	d115      	bne.n	8001218 <HAL_ADC_IRQHandler+0x10c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b80      	cmp	r3, #128	; 0x80
 80011f8:	d10e      	bne.n	8001218 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	0252      	lsls	r2, r2, #9
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f836 	bl	800127c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2210      	movs	r2, #16
 8001220:	4013      	ands	r3, r2
 8001222:	2b10      	cmp	r3, #16
 8001224:	d123      	bne.n	800126e <HAL_ADC_IRQHandler+0x162>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2210      	movs	r2, #16
 800122e:	4013      	ands	r3, r2
 8001230:	2b10      	cmp	r3, #16
 8001232:	d11c      	bne.n	800126e <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	2b01      	cmp	r3, #1
 800123a:	d006      	beq.n	800124a <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10d      	bne.n	8001266 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124e:	2202      	movs	r2, #2
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2210      	movs	r2, #16
 800125c:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f000 f813 	bl	800128c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2210      	movs	r2, #16
 800126c:	601a      	str	r2, [r3, #0]
  }

}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	fffffefe 	.word	0xfffffefe

0800127c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d011      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00d      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d009      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d005      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d001      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2234      	movs	r2, #52	; 0x34
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x54>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e0bb      	b.n	8001468 <HAL_ADC_ConfigChannel+0x1cc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2234      	movs	r2, #52	; 0x34
 80012f4:	2101      	movs	r1, #1
 80012f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2204      	movs	r2, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d000      	beq.n	8001306 <HAL_ADC_ConfigChannel+0x6a>
 8001304:	e09f      	b.n	8001446 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a59      	ldr	r2, [pc, #356]	; (8001470 <HAL_ADC_ConfigChannel+0x1d4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x76>
 8001310:	e077      	b.n	8001402 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	055b      	lsls	r3, r3, #21
 8001330:	429a      	cmp	r2, r3
 8001332:	d037      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b01      	cmp	r3, #1
 800133a:	d033      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2b02      	cmp	r3, #2
 8001342:	d02f      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b03      	cmp	r3, #3
 800134a:	d02b      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2b04      	cmp	r3, #4
 8001352:	d027      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	2b05      	cmp	r3, #5
 800135a:	d023      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b06      	cmp	r3, #6
 8001362:	d01f      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	2b07      	cmp	r3, #7
 800136a:	d01b      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2107      	movs	r1, #7
 8001378:	400b      	ands	r3, r1
 800137a:	429a      	cmp	r2, r3
 800137c:	d012      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2107      	movs	r1, #7
 800138a:	438a      	bics	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6959      	ldr	r1, [r3, #20]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2207      	movs	r2, #7
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d003      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x118>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b11      	cmp	r3, #17
 80013b2:	d152      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d102      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x12a>
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	e001      	b.n	80013ca <HAL_ADC_ConfigChannel+0x12e>
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	03db      	lsls	r3, r3, #15
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d140      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_ADC_ConfigChannel+0x1dc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_ADC_ConfigChannel+0x1e0>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe fe92 	bl	8000108 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	001a      	movs	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	189b      	adds	r3, r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f2:	e002      	b.n	80013fa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f9      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x158>
 8001400:	e02b      	b.n	800145a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	4099      	lsls	r1, r3
 8001410:	000b      	movs	r3, r1
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d003      	beq.n	800142c <HAL_ADC_ConfigChannel+0x190>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b11      	cmp	r3, #17
 800142a:	d116      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1a0>
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_ADC_ConfigChannel+0x1e4>)
 800143a:	e000      	b.n	800143e <HAL_ADC_ConfigChannel+0x1a2>
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x1e8>)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e009      	b.n	800145a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	2220      	movs	r2, #32
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001452:	230f      	movs	r3, #15
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2234      	movs	r2, #52	; 0x34
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	00001001 	.word	0x00001001
 8001474:	40012708 	.word	0x40012708
 8001478:	20000000 	.word	0x20000000
 800147c:	000f4240 	.word	0x000f4240
 8001480:	ff7fffff 	.word	0xff7fffff
 8001484:	ffbfffff 	.word	0xffbfffff

08001488 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2203      	movs	r2, #3
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d112      	bne.n	80014cc <ADC_Enable+0x44>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d009      	beq.n	80014c8 <ADC_Enable+0x40>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	401a      	ands	r2, r3
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d101      	bne.n	80014cc <ADC_Enable+0x44>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <ADC_Enable+0x46>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d152      	bne.n	8001578 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <ADC_Enable+0xfc>)
 80014da:	4013      	ands	r3, r2
 80014dc:	d00d      	beq.n	80014fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	2210      	movs	r2, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	2201      	movs	r2, #1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e03f      	b.n	800157a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <ADC_Enable+0x100>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	491f      	ldr	r1, [pc, #124]	; (800158c <ADC_Enable+0x104>)
 8001510:	0018      	movs	r0, r3
 8001512:	f7fe fdf9 	bl	8000108 <__udivsi3>
 8001516:	0003      	movs	r3, r0
 8001518:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800151a:	e002      	b.n	8001522 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3b01      	subs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001528:	f7ff fc28 	bl	8000d7c <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001530:	e01b      	b.n	800156a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001532:	f7ff fc23 	bl	8000d7c <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d914      	bls.n	800156a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00d      	beq.n	800156a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	2210      	movs	r2, #16
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	2201      	movs	r2, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	2b01      	cmp	r3, #1
 8001576:	d1dc      	bne.n	8001532 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	80000017 	.word	0x80000017
 8001588:	20000000 	.word	0x20000000
 800158c:	000f4240 	.word	0x000f4240

08001590 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2317      	movs	r3, #23
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2234      	movs	r2, #52	; 0x34
 80015ac:	5c9b      	ldrb	r3, [r3, r2]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADCEx_Calibration_Start+0x26>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e08d      	b.n	80016d2 <HAL_ADCEx_Calibration_Start+0x142>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2234      	movs	r2, #52	; 0x34
 80015ba:	2101      	movs	r1, #1
 80015bc:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d112      	bne.n	80015f2 <HAL_ADCEx_Calibration_Start+0x62>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d009      	beq.n	80015ee <HAL_ADCEx_Calibration_Start+0x5e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	401a      	ands	r2, r3
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d101      	bne.n	80015f2 <HAL_ADCEx_Calibration_Start+0x62>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADCEx_Calibration_Start+0x64>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d15b      	bne.n	80016b0 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	4a37      	ldr	r2, [pc, #220]	; (80016dc <HAL_ADCEx_Calibration_Start+0x14c>)
 80015fe:	4013      	ands	r3, r2
 8001600:	2202      	movs	r2, #2
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2203      	movs	r2, #3
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2103      	movs	r1, #3
 8001620:	438a      	bics	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	0609      	lsls	r1, r1, #24
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001636:	f7ff fba1 	bl	8000d7c <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800163e:	e01d      	b.n	800167c <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001640:	f7ff fb9c 	bl	8000d7c <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d916      	bls.n	800167c <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	0fdb      	lsrs	r3, r3, #31
 8001656:	07da      	lsls	r2, r3, #31
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	429a      	cmp	r2, r3
 800165e:	d10d      	bne.n	800167c <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	2212      	movs	r2, #18
 8001666:	4393      	bics	r3, r2
 8001668:	2210      	movs	r2, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2234      	movs	r2, #52	; 0x34
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e02a      	b.n	80016d2 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0fdb      	lsrs	r3, r3, #31
 8001684:	07da      	lsls	r2, r3, #31
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	429a      	cmp	r2, r3
 800168c:	d0d8      	beq.n	8001640 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	430a      	orrs	r2, r1
 800169c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	2203      	movs	r2, #3
 80016a4:	4393      	bics	r3, r2
 80016a6:	2201      	movs	r2, #1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
 80016ae:	e009      	b.n	80016c4 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b4:	2220      	movs	r2, #32
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016bc:	2317      	movs	r3, #23
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2234      	movs	r2, #52	; 0x34
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b006      	add	sp, #24
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	fffffefd 	.word	0xfffffefd

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	0002      	movs	r2, r0
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b7f      	cmp	r3, #127	; 0x7f
 80016f2:	d809      	bhi.n	8001708 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	231f      	movs	r3, #31
 80016fc:	401a      	ands	r2, r3
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_EnableIRQ+0x30>)
 8001700:	2101      	movs	r1, #1
 8001702:	4091      	lsls	r1, r2
 8001704:	000a      	movs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
  }
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	0002      	movs	r2, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b7f      	cmp	r3, #127	; 0x7f
 8001728:	d828      	bhi.n	800177c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172a:	4a2f      	ldr	r2, [pc, #188]	; (80017e8 <__NVIC_SetPriority+0xd4>)
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	33c0      	adds	r3, #192	; 0xc0
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	589b      	ldr	r3, [r3, r2]
 800173a:	1dfa      	adds	r2, r7, #7
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	0011      	movs	r1, r2
 8001740:	2203      	movs	r2, #3
 8001742:	400a      	ands	r2, r1
 8001744:	00d2      	lsls	r2, r2, #3
 8001746:	21ff      	movs	r1, #255	; 0xff
 8001748:	4091      	lsls	r1, r2
 800174a:	000a      	movs	r2, r1
 800174c:	43d2      	mvns	r2, r2
 800174e:	401a      	ands	r2, r3
 8001750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	22ff      	movs	r2, #255	; 0xff
 8001758:	401a      	ands	r2, r3
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	0018      	movs	r0, r3
 8001760:	2303      	movs	r3, #3
 8001762:	4003      	ands	r3, r0
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <__NVIC_SetPriority+0xd4>)
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	430a      	orrs	r2, r1
 8001774:	33c0      	adds	r3, #192	; 0xc0
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800177a:	e031      	b.n	80017e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <__NVIC_SetPriority+0xd8>)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	0019      	movs	r1, r3
 8001784:	230f      	movs	r3, #15
 8001786:	400b      	ands	r3, r1
 8001788:	3b08      	subs	r3, #8
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3306      	adds	r3, #6
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	3304      	adds	r3, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1dfa      	adds	r2, r7, #7
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	0011      	movs	r1, r2
 800179c:	2203      	movs	r2, #3
 800179e:	400a      	ands	r2, r1
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	43d2      	mvns	r2, r2
 80017aa:	401a      	ands	r2, r3
 80017ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	401a      	ands	r2, r3
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	0018      	movs	r0, r3
 80017bc:	2303      	movs	r3, #3
 80017be:	4003      	ands	r3, r0
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <__NVIC_SetPriority+0xd8>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	001c      	movs	r4, r3
 80017cc:	230f      	movs	r3, #15
 80017ce:	4023      	ands	r3, r4
 80017d0:	3b08      	subs	r3, #8
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	430a      	orrs	r2, r1
 80017d6:	3306      	adds	r3, #6
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	18c3      	adds	r3, r0, r3
 80017dc:	3304      	adds	r3, #4
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b003      	add	sp, #12
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	045b      	lsls	r3, r3, #17
 8001800:	429a      	cmp	r2, r3
 8001802:	d301      	bcc.n	8001808 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001804:	2301      	movs	r3, #1
 8001806:	e010      	b.n	800182a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <SysTick_Config+0x44>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	3a01      	subs	r2, #1
 800180e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001810:	2301      	movs	r3, #1
 8001812:	425b      	negs	r3, r3
 8001814:	2103      	movs	r1, #3
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff ff7c 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x44>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x44>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	210f      	movs	r1, #15
 8001844:	187b      	adds	r3, r7, r1
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	187b      	adds	r3, r7, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	0002      	movs	r2, r0
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25b      	sxtb	r3, r3
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff33 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff ffaf 	bl	80017f0 <SysTick_Config>
 8001892:	0003      	movs	r3, r0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e14f      	b.n	8001b4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4091      	lsls	r1, r2
 80018b6:	000a      	movs	r2, r1
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d100      	bne.n	80018c4 <HAL_GPIO_Init+0x28>
 80018c2:	e140      	b.n	8001b46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	2201      	movs	r2, #1
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	2b03      	cmp	r3, #3
 8001948:	d017      	beq.n	800197a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	4013      	ands	r3, r2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d123      	bne.n	80019ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	58d3      	ldr	r3, [r2, r3]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2107      	movs	r1, #7
 80019b2:	400b      	ands	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2203      	movs	r2, #3
 80019ec:	401a      	ands	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_GPIO_Init+0x174>
 8001a0e:	e09a      	b.n	8001b46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	589b      	ldr	r3, [r3, r2]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	409a      	lsls	r2, r3
 8001a42:	0013      	movs	r3, r2
 8001a44:	43da      	mvns	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	2390      	movs	r3, #144	; 0x90
 8001a50:	05db      	lsls	r3, r3, #23
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1e2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a44      	ldr	r2, [pc, #272]	; (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1de>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_GPIO_Init+0x2d4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a42      	ldr	r2, [pc, #264]	; (8001b74 <HAL_GPIO_Init+0x2d8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1d6>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	2103      	movs	r1, #3
 8001a84:	400a      	ands	r2, r1
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	; (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	035b      	lsls	r3, r3, #13
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	039b      	lsls	r3, r3, #14
 8001b34:	4013      	ands	r3, r2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	1e13      	subs	r3, r2, #0
 8001b56:	d000      	beq.n	8001b5a <HAL_GPIO_Init+0x2be>
 8001b58:	e6a8      	b.n	80018ac <HAL_GPIO_Init+0x10>
  } 
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	000a      	movs	r2, r1
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	1cba      	adds	r2, r7, #2
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	4013      	ands	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b96:	230f      	movs	r3, #15
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
  }
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	0008      	movs	r0, r1
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	1c02      	adds	r2, r0, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	1c7b      	adds	r3, r7, #1
 8001bca:	1c0a      	adds	r2, r1, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bce:	1c7b      	adds	r3, r7, #1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be0:	1cbb      	adds	r3, r7, #2
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e301      	b.n	8002206 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1e>
 8001c0c:	e08d      	b.n	8001d2a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c0e:	4bc3      	ldr	r3, [pc, #780]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	220c      	movs	r2, #12
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d00e      	beq.n	8001c38 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1a:	4bc0      	ldr	r3, [pc, #768]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	220c      	movs	r2, #12
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x64>
 8001c26:	4bbd      	ldr	r3, [pc, #756]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	401a      	ands	r2, r3
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10d      	bne.n	8001c54 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4bb8      	ldr	r3, [pc, #736]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d100      	bne.n	8001c46 <HAL_RCC_OscConfig+0x56>
 8001c44:	e070      	b.n	8001d28 <HAL_RCC_OscConfig+0x138>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d000      	beq.n	8001c50 <HAL_RCC_OscConfig+0x60>
 8001c4e:	e06b      	b.n	8001d28 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2d8      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x7c>
 8001c5c:	4baf      	ldr	r3, [pc, #700]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4bae      	ldr	r3, [pc, #696]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	0249      	lsls	r1, r1, #9
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e02f      	b.n	8001ccc <HAL_RCC_OscConfig+0xdc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x9e>
 8001c74:	4ba9      	ldr	r3, [pc, #676]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	49a9      	ldr	r1, [pc, #676]	; (8001f20 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4ba6      	ldr	r3, [pc, #664]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4ba5      	ldr	r3, [pc, #660]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c86:	49a7      	ldr	r1, [pc, #668]	; (8001f24 <HAL_RCC_OscConfig+0x334>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e01e      	b.n	8001ccc <HAL_RCC_OscConfig+0xdc>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10e      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xc4>
 8001c96:	4ba1      	ldr	r3, [pc, #644]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4ba0      	ldr	r3, [pc, #640]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	02c9      	lsls	r1, r1, #11
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	4b9d      	ldr	r3, [pc, #628]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b9c      	ldr	r3, [pc, #624]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0249      	lsls	r1, r1, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xdc>
 8001cb4:	4b99      	ldr	r3, [pc, #612]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b98      	ldr	r3, [pc, #608]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cba:	4999      	ldr	r1, [pc, #612]	; (8001f20 <HAL_RCC_OscConfig+0x330>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4b96      	ldr	r3, [pc, #600]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b95      	ldr	r3, [pc, #596]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	4997      	ldr	r1, [pc, #604]	; (8001f24 <HAL_RCC_OscConfig+0x334>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d014      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f852 	bl	8000d7c <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7ff f84d 	bl	8000d7c <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e28a      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf0:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0xee>
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f83d 	bl	8000d7c <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff f838 	bl	8000d7c <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e275      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x118>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d100      	bne.n	8001d36 <HAL_RCC_OscConfig+0x146>
 8001d34:	e069      	b.n	8001e0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d36:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d00b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d40:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	220c      	movs	r2, #12
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d11c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x196>
 8001d4c:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	4013      	ands	r3, r2
 8001d56:	d116      	bne.n	8001d86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d58:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e24b      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	22f8      	movs	r2, #248	; 0xf8
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00da      	lsls	r2, r3, #3
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d84:	e041      	b.n	8001e0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d024      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe ffef 	bl	8000d7c <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da4:	f7fe ffea 	bl	8000d7c <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e227      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f1      	beq.n	8001da4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	22f8      	movs	r2, #248	; 0xf8
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00da      	lsls	r2, r3, #3
 8001dd0:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffca 	bl	8000d7c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dee:	f7fe ffc5 	bl	8000d7c <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e202      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e00:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2208      	movs	r2, #8
 8001e10:	4013      	ands	r3, r2
 8001e12:	d036      	beq.n	8001e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d019      	beq.n	8001e50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe ffa8 	bl	8000d7c <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7fe ffa3 	bl	8000d7c <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1e0      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0f1      	beq.n	8001e32 <HAL_RCC_OscConfig+0x242>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	438a      	bics	r2, r1
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7fe ff8e 	bl	8000d7c <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e66:	f7fe ff89 	bl	8000d7c <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1c6      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d1f1      	bne.n	8001e66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x29e>
 8001e8c:	e0b4      	b.n	8001ff8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	201f      	movs	r0, #31
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	055b      	lsls	r3, r3, #21
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d110      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0549      	lsls	r1, r1, #21
 8001eac:	430a      	orrs	r2, r1
 8001eae:	61da      	str	r2, [r3, #28]
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	055b      	lsls	r3, r3, #21
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d11a      	bne.n	8001f06 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0049      	lsls	r1, r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7fe ff4d 	bl	8000d7c <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee8:	f7fe ff48 	bl	8000d7c <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e185      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x33c>
 8001f0e:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	621a      	str	r2, [r3, #32]
 8001f1a:	e035      	b.n	8001f88 <HAL_RCC_OscConfig+0x398>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	fffeffff 	.word	0xfffeffff
 8001f24:	fffbffff 	.word	0xfffbffff
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x35e>
 8001f34:	4bb6      	ldr	r3, [pc, #728]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f36:	6a1a      	ldr	r2, [r3, #32]
 8001f38:	4bb5      	ldr	r3, [pc, #724]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	438a      	bics	r2, r1
 8001f3e:	621a      	str	r2, [r3, #32]
 8001f40:	4bb3      	ldr	r3, [pc, #716]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4bb2      	ldr	r3, [pc, #712]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f46:	2104      	movs	r1, #4
 8001f48:	438a      	bics	r2, r1
 8001f4a:	621a      	str	r2, [r3, #32]
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x398>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x380>
 8001f56:	4bae      	ldr	r3, [pc, #696]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	4bad      	ldr	r3, [pc, #692]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	621a      	str	r2, [r3, #32]
 8001f62:	4bab      	ldr	r3, [pc, #684]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	4baa      	ldr	r3, [pc, #680]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	621a      	str	r2, [r3, #32]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x398>
 8001f70:	4ba7      	ldr	r3, [pc, #668]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4ba6      	ldr	r3, [pc, #664]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	438a      	bics	r2, r1
 8001f7a:	621a      	str	r2, [r3, #32]
 8001f7c:	4ba4      	ldr	r3, [pc, #656]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	4ba3      	ldr	r3, [pc, #652]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001f82:	2104      	movs	r1, #4
 8001f84:	438a      	bics	r2, r1
 8001f86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d014      	beq.n	8001fba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7fe fef4 	bl	8000d7c <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	e009      	b.n	8001fae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe feef 	bl	8000d7c <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	4a9b      	ldr	r2, [pc, #620]	; (8002214 <HAL_RCC_OscConfig+0x624>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e12b      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3aa>
 8001fb8:	e013      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7fe fedf 	bl	8000d7c <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7fe feda 	bl	8000d7c <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	4a91      	ldr	r2, [pc, #580]	; (8002214 <HAL_RCC_OscConfig+0x624>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e116      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b8d      	ldr	r3, [pc, #564]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe2:	231f      	movs	r3, #31
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fec:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	4989      	ldr	r1, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	4013      	ands	r3, r2
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d12a      	bne.n	8002060 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800200a:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002010:	2104      	movs	r1, #4
 8002012:	430a      	orrs	r2, r1
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002016:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800201c:	2101      	movs	r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe feab 	bl	8000d7c <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800202c:	f7fe fea6 	bl	8000d7c <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0e3      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d0f1      	beq.n	800202c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002048:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	22f8      	movs	r2, #248	; 0xf8
 800204e:	4393      	bics	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	00da      	lsls	r2, r3, #3
 8002058:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	e034      	b.n	80020ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	3305      	adds	r3, #5
 8002066:	d111      	bne.n	800208c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002068:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800206a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800206e:	2104      	movs	r1, #4
 8002070:	438a      	bics	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	22f8      	movs	r2, #248	; 0xf8
 800207a:	4393      	bics	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	00da      	lsls	r2, r3, #3
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e01e      	b.n	80020ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800208c:	4b60      	ldr	r3, [pc, #384]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800208e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002090:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002092:	2104      	movs	r1, #4
 8002094:	430a      	orrs	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800209a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209c:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800209e:	2101      	movs	r1, #1
 80020a0:	438a      	bics	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fe6a 	bl	8000d7c <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ae:	f7fe fe65 	bl	8000d7c <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0a2      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f1      	bne.n	80020ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4e4>
 80020d2:	e097      	b.n	8002204 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	220c      	movs	r2, #12
 80020da:	4013      	ands	r3, r2
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4f2>
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d14c      	bne.n	8002184 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80020f0:	494a      	ldr	r1, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x62c>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fe41 	bl	8000d7c <HAL_GetTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fe3c 	bl	8000d7c <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e079      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	049b      	lsls	r3, r3, #18
 800211a:	4013      	ands	r3, r2
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	220f      	movs	r2, #15
 8002124:	4393      	bics	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212c:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <HAL_RCC_OscConfig+0x630>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	431a      	orrs	r2, r3
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0449      	lsls	r1, r1, #17
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fe0f 	bl	8000d7c <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fe0a 	bl	8000d7c <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e047      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	049b      	lsls	r3, r3, #18
 800217e:	4013      	ands	r3, r2
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x574>
 8002182:	e03f      	b.n	8002204 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800218a:	4924      	ldr	r1, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x62c>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fdf4 	bl	8000d7c <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe fdef 	bl	8000d7c <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e02c      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	049b      	lsls	r3, r3, #18
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x5aa>
 80021b8:	e024      	b.n	8002204 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01f      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	429a      	cmp	r2, r3
 80021e0:	d10e      	bne.n	8002200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	220f      	movs	r2, #15
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	23f0      	movs	r3, #240	; 0xf0
 80021f4:	039b      	lsls	r3, r3, #14
 80021f6:	401a      	ands	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b008      	add	sp, #32
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40021000 	.word	0x40021000
 8002214:	00001388 	.word	0x00001388
 8002218:	efffffff 	.word	0xefffffff
 800221c:	feffffff 	.word	0xfeffffff
 8002220:	ffc2ffff 	.word	0xffc2ffff

08002224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b3      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d911      	bls.n	800226a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e09a      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d006      	beq.n	800228c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800227e:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 8002284:	21e0      	movs	r1, #224	; 0xe0
 8002286:	00c9      	lsls	r1, r1, #3
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	22f0      	movs	r2, #240	; 0xf0
 8002292:	4393      	bics	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d040      	beq.n	800232c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	d114      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06e      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	049b      	lsls	r3, r3, #18
 80022d2:	4013      	ands	r3, r2
 80022d4:	d108      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e062      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e05b      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	4393      	bics	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fd3e 	bl	8000d7c <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002304:	e009      	b.n	800231a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fe fd39 	bl	8000d7c <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_RCC_ClockConfig+0x18c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e042      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	220c      	movs	r2, #12
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1ec      	bne.n	8002306 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d211      	bcs.n	800235e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4393      	bics	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x184>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e020      	b.n	80023a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_RCC_ClockConfig+0x190>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800237c:	f000 f820 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002380:	0001      	movs	r1, r0
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x188>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	220f      	movs	r2, #15
 800238a:	4013      	ands	r3, r2
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x194>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	000a      	movs	r2, r1
 8002392:	40da      	lsrs	r2, r3
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x198>)
 8002396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fca9 	bl	8000cf0 <HAL_InitTick>
  
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	00001388 	.word	0x00001388
 80023b4:	fffff8ff 	.word	0xfffff8ff
 80023b8:	08002ca0 	.word	0x08002ca0
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b08f      	sub	sp, #60	; 0x3c
 80023c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80023c6:	2314      	movs	r3, #20
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023ce:	c313      	stmia	r3!, {r0, r1, r4}
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4a29      	ldr	r2, [pc, #164]	; (800247c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023da:	c313      	stmia	r3!, {r0, r1, r4}
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	220c      	movs	r2, #12
 80023fe:	4013      	ands	r3, r2
 8002400:	2b04      	cmp	r3, #4
 8002402:	d002      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x4a>
 8002404:	2b08      	cmp	r3, #8
 8002406:	d003      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x50>
 8002408:	e02d      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240e:	e02d      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	220f      	movs	r2, #15
 8002416:	4013      	ands	r3, r2
 8002418:	2214      	movs	r2, #20
 800241a:	18ba      	adds	r2, r7, r2
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	220f      	movs	r2, #15
 8002426:	4013      	ands	r3, r2
 8002428:	1d3a      	adds	r2, r7, #4
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	4013      	ands	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800243c:	f7fd fe64 	bl	8000108 <__udivsi3>
 8002440:	0003      	movs	r3, r0
 8002442:	001a      	movs	r2, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	4353      	muls	r3, r2
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
 800244a:	e009      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800244c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244e:	000a      	movs	r2, r1
 8002450:	0152      	lsls	r2, r2, #5
 8002452:	1a52      	subs	r2, r2, r1
 8002454:	0193      	lsls	r3, r2, #6
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	185b      	adds	r3, r3, r1
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b00f      	add	sp, #60	; 0x3c
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	08002be0 	.word	0x08002be0
 800247c:	08002bf0 	.word	0x08002bf0
 8002480:	40021000 	.word	0x40021000
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <HAL_RCC_GetHCLKFreq+0x10>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80024a0:	f7ff fff2 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a4:	0001      	movs	r1, r0
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	2207      	movs	r2, #7
 80024ae:	4013      	ands	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	40d9      	lsrs	r1, r3
 80024b6:	000b      	movs	r3, r1
}    
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08002cb0 	.word	0x08002cb0

080024c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e044      	b.n	8002564 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2274      	movs	r2, #116	; 0x74
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7fe fb4b 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2224      	movs	r2, #36	; 0x24
 80024f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2101      	movs	r1, #1
 8002504:	438a      	bics	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f830 	bl	8002570 <UART_SetConfig>
 8002510:	0003      	movs	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e024      	b.n	8002564 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f000 f963 	bl	80027f0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	490d      	ldr	r1, [pc, #52]	; (800256c <HAL_UART_Init+0xa4>)
 8002536:	400a      	ands	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2108      	movs	r1, #8
 8002546:	438a      	bics	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 f9fb 	bl	8002958 <UART_CheckIdleState>
 8002562:	0003      	movs	r3, r0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffff7ff 	.word	0xfffff7ff

08002570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002578:	231e      	movs	r3, #30
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a8d      	ldr	r2, [pc, #564]	; (80027d4 <UART_SetConfig+0x264>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a88      	ldr	r2, [pc, #544]	; (80027d8 <UART_SetConfig+0x268>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a7f      	ldr	r2, [pc, #508]	; (80027dc <UART_SetConfig+0x26c>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <UART_SetConfig+0x270>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d127      	bne.n	8002646 <UART_SetConfig+0xd6>
 80025f6:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <UART_SetConfig+0x274>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	2203      	movs	r2, #3
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d00d      	beq.n	800261e <UART_SetConfig+0xae>
 8002602:	d81b      	bhi.n	800263c <UART_SetConfig+0xcc>
 8002604:	2b02      	cmp	r3, #2
 8002606:	d014      	beq.n	8002632 <UART_SetConfig+0xc2>
 8002608:	d818      	bhi.n	800263c <UART_SetConfig+0xcc>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <UART_SetConfig+0xa4>
 800260e:	2b01      	cmp	r3, #1
 8002610:	d00a      	beq.n	8002628 <UART_SetConfig+0xb8>
 8002612:	e013      	b.n	800263c <UART_SetConfig+0xcc>
 8002614:	231f      	movs	r3, #31
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e021      	b.n	8002662 <UART_SetConfig+0xf2>
 800261e:	231f      	movs	r3, #31
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e01c      	b.n	8002662 <UART_SetConfig+0xf2>
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2204      	movs	r2, #4
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e017      	b.n	8002662 <UART_SetConfig+0xf2>
 8002632:	231f      	movs	r3, #31
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2208      	movs	r2, #8
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e012      	b.n	8002662 <UART_SetConfig+0xf2>
 800263c:	231f      	movs	r3, #31
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2210      	movs	r2, #16
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e00d      	b.n	8002662 <UART_SetConfig+0xf2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a67      	ldr	r2, [pc, #412]	; (80027e8 <UART_SetConfig+0x278>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d104      	bne.n	800265a <UART_SetConfig+0xea>
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e003      	b.n	8002662 <UART_SetConfig+0xf2>
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2210      	movs	r2, #16
 8002660:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	429a      	cmp	r2, r3
 800266c:	d15d      	bne.n	800272a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800266e:	231f      	movs	r3, #31
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d015      	beq.n	80026a4 <UART_SetConfig+0x134>
 8002678:	dc18      	bgt.n	80026ac <UART_SetConfig+0x13c>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00d      	beq.n	800269a <UART_SetConfig+0x12a>
 800267e:	dc15      	bgt.n	80026ac <UART_SetConfig+0x13c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <UART_SetConfig+0x11a>
 8002684:	2b02      	cmp	r3, #2
 8002686:	d005      	beq.n	8002694 <UART_SetConfig+0x124>
 8002688:	e010      	b.n	80026ac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800268a:	f7ff ff07 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 800268e:	0003      	movs	r3, r0
 8002690:	61bb      	str	r3, [r7, #24]
        break;
 8002692:	e012      	b.n	80026ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002694:	4b55      	ldr	r3, [pc, #340]	; (80027ec <UART_SetConfig+0x27c>)
 8002696:	61bb      	str	r3, [r7, #24]
        break;
 8002698:	e00f      	b.n	80026ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269a:	f7ff fe91 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800269e:	0003      	movs	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
        break;
 80026a2:	e00a      	b.n	80026ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	61bb      	str	r3, [r7, #24]
        break;
 80026aa:	e006      	b.n	80026ba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026b0:	231e      	movs	r3, #30
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
        break;
 80026b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <UART_SetConfig+0x152>
 80026c0:	e07b      	b.n	80027ba <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	18d2      	adds	r2, r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f7fd fd17 	bl	8000108 <__udivsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	b29b      	uxth	r3, r3
 80026de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d91c      	bls.n	8002720 <UART_SetConfig+0x1b0>
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	025b      	lsls	r3, r3, #9
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d217      	bcs.n	8002720 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	200e      	movs	r0, #14
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	210f      	movs	r1, #15
 80026fa:	438a      	bics	r2, r1
 80026fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	2207      	movs	r2, #7
 8002706:	4013      	ands	r3, r2
 8002708:	b299      	uxth	r1, r3
 800270a:	183b      	adds	r3, r7, r0
 800270c:	183a      	adds	r2, r7, r0
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	183a      	adds	r2, r7, r0
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e04c      	b.n	80027ba <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002720:	231e      	movs	r3, #30
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e047      	b.n	80027ba <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d015      	beq.n	8002760 <UART_SetConfig+0x1f0>
 8002734:	dc18      	bgt.n	8002768 <UART_SetConfig+0x1f8>
 8002736:	2b04      	cmp	r3, #4
 8002738:	d00d      	beq.n	8002756 <UART_SetConfig+0x1e6>
 800273a:	dc15      	bgt.n	8002768 <UART_SetConfig+0x1f8>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <UART_SetConfig+0x1d6>
 8002740:	2b02      	cmp	r3, #2
 8002742:	d005      	beq.n	8002750 <UART_SetConfig+0x1e0>
 8002744:	e010      	b.n	8002768 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002746:	f7ff fea9 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 800274a:	0003      	movs	r3, r0
 800274c:	61bb      	str	r3, [r7, #24]
        break;
 800274e:	e012      	b.n	8002776 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <UART_SetConfig+0x27c>)
 8002752:	61bb      	str	r3, [r7, #24]
        break;
 8002754:	e00f      	b.n	8002776 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002756:	f7ff fe33 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800275a:	0003      	movs	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]
        break;
 800275e:	e00a      	b.n	8002776 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	61bb      	str	r3, [r7, #24]
        break;
 8002766:	e006      	b.n	8002776 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        break;
 8002774:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01e      	beq.n	80027ba <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	085a      	lsrs	r2, r3, #1
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f7fd fcbb 	bl	8000108 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	b29b      	uxth	r3, r3
 8002796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	d909      	bls.n	80027b2 <UART_SetConfig+0x242>
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d204      	bcs.n	80027b2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e003      	b.n	80027ba <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027c6:	231e      	movs	r3, #30
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b008      	add	sp, #32
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffff69f3 	.word	0xffff69f3
 80027d8:	ffffcfff 	.word	0xffffcfff
 80027dc:	fffff4ff 	.word	0xfffff4ff
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40004400 	.word	0x40004400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d00b      	beq.n	800281a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <UART_AdvFeatureConfig+0x144>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d00b      	beq.n	800283c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a43      	ldr	r2, [pc, #268]	; (8002938 <UART_AdvFeatureConfig+0x148>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d00b      	beq.n	800285e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <UART_AdvFeatureConfig+0x14c>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2208      	movs	r2, #8
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a34      	ldr	r2, [pc, #208]	; (8002940 <UART_AdvFeatureConfig+0x150>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2210      	movs	r2, #16
 8002886:	4013      	ands	r3, r2
 8002888:	d00b      	beq.n	80028a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <UART_AdvFeatureConfig+0x154>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2220      	movs	r2, #32
 80028a8:	4013      	ands	r3, r2
 80028aa:	d00b      	beq.n	80028c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a25      	ldr	r2, [pc, #148]	; (8002948 <UART_AdvFeatureConfig+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d01d      	beq.n	800290a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	; (800294c <UART_AdvFeatureConfig+0x15c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	035b      	lsls	r3, r3, #13
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10b      	bne.n	800290a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <UART_AdvFeatureConfig+0x160>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	4013      	ands	r3, r2
 8002912:	d00b      	beq.n	800292c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <UART_AdvFeatureConfig+0x164>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  }
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fffdffff 	.word	0xfffdffff
 8002938:	fffeffff 	.word	0xfffeffff
 800293c:	fffbffff 	.word	0xfffbffff
 8002940:	ffff7fff 	.word	0xffff7fff
 8002944:	ffffefff 	.word	0xffffefff
 8002948:	ffffdfff 	.word	0xffffdfff
 800294c:	ffefffff 	.word	0xffefffff
 8002950:	ff9fffff 	.word	0xff9fffff
 8002954:	fff7ffff 	.word	0xfff7ffff

08002958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	2100      	movs	r1, #0
 8002966:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002968:	f7fe fa08 	bl	8000d7c <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2208      	movs	r2, #8
 8002978:	4013      	ands	r3, r2
 800297a:	2b08      	cmp	r3, #8
 800297c:	d10c      	bne.n	8002998 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0391      	lsls	r1, r2, #14
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <UART_CheckIdleState+0x8c>)
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	f000 f82c 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e021      	b.n	80029dc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2204      	movs	r2, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d10c      	bne.n	80029c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	03d1      	lsls	r1, r2, #15
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <UART_CheckIdleState+0x8c>)
 80029b0:	9200      	str	r2, [sp, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f000 f818 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e00d      	b.n	80029dc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2274      	movs	r2, #116	; 0x74
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	01ffffff 	.word	0x01ffffff

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b094      	sub	sp, #80	; 0x50
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e0a3      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	3301      	adds	r3, #1
 80029fe:	d100      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a00:	e09f      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe f9bb 	bl	8000d7c <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13d      	bne.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
 8002a22:	2301      	movs	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	494c      	ldr	r1, [pc, #304]	; (8002b6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
 8002a54:	2301      	movs	r3, #1
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2274      	movs	r2, #116	; 0x74
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e067      	b.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d050      	beq.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	401a      	ands	r2, r3
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d146      	bne.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8002ac4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4923      	ldr	r1, [pc, #140]	; (8002b6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af0:	f3ef 8310 	mrs	r3, PRIMASK
 8002af4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002af6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002afa:	2301      	movs	r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	2120      	movs	r1, #32
 8002b34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2274      	movs	r2, #116	; 0x74
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e010      	b.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	425a      	negs	r2, r3
 8002b52:	4153      	adcs	r3, r2
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	001a      	movs	r2, r3
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d100      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b60:	e74b      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b014      	add	sp, #80	; 0x50
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	fffffe5f 	.word	0xfffffe5f

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	2600      	movs	r6, #0
 8002b74:	4d0c      	ldr	r5, [pc, #48]	; (8002ba8 <__libc_init_array+0x38>)
 8002b76:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <__libc_init_array+0x3c>)
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	42a6      	cmp	r6, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	2600      	movs	r6, #0
 8002b82:	f000 f821 	bl	8002bc8 <_init>
 8002b86:	4d0a      	ldr	r5, [pc, #40]	; (8002bb0 <__libc_init_array+0x40>)
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <__libc_init_array+0x44>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	42a6      	cmp	r6, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	00b3      	lsls	r3, r6, #2
 8002b96:	58eb      	ldr	r3, [r5, r3]
 8002b98:	4798      	blx	r3
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	00b3      	lsls	r3, r6, #2
 8002ba0:	58eb      	ldr	r3, [r5, r3]
 8002ba2:	4798      	blx	r3
 8002ba4:	3601      	adds	r6, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	08002cb8 	.word	0x08002cb8
 8002bac:	08002cb8 	.word	0x08002cb8
 8002bb0:	08002cb8 	.word	0x08002cb8
 8002bb4:	08002cbc 	.word	0x08002cbc

08002bb8 <memset>:
 8002bb8:	0003      	movs	r3, r0
 8002bba:	1882      	adds	r2, r0, r2
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	7019      	strb	r1, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
